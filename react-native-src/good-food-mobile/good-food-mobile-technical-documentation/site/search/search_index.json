{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bienvenue sur GOOD FOOD V2 Installation de l'environnement de l'application mobile Pr\u00e9requis Docker for desktop NodeJS # Contenant \u00e9galement le gestionnaire de paquet NPM. Expo # Pour \u00e9muler l'application mobile sur vos devices Android et IOS Installer \"Expo CLI\" : npm install -g expo-cli Installer YARN pour installer les d\u00e9pendances du projet ATTENTION DE BIEN SE POSITIONNER DANS react-native-src/good-food-mobile Cr\u00e9ation normale du projet React-Native avec Expo SANS DOCKER * ### Commandes \u00e0 taper dans le terminal ```expo init GoodFood``` ```cd GoodFood``` ```npm start``` # On peut aussi utiliser expo start Cela d\u00e9marrera un serveur pour nous * ### Visualiser le projet sur son device * Installer Expo sur son device * Ouvrir Expo et flasher le QRcode g\u00e9n\u00e9r\u00e9 par la commande expo start (Pour IOS, utiliser le lecteur de QRcode int\u00e9gr\u00e9 \u00e0 l'appareil photo) C'est tout ! Il suffit maintenant de modifier le fichier App.js pour commencer \u00e0 d\u00e9velopper l'application et voir en temps r\u00e9el les changements effectu\u00e9s. Cr\u00e9ation normale du projet React-Native avec Expo AVEC DOCKER Se reporter au fichier README.md sur le repository pour installer un projet react-native dans un container DOCKER. Les d\u00e9pendences install\u00e9es Afin de g\u00e9rer la gestion de l'application Good Food, les d\u00e9pendances contenues dans le fichier package.json sont \u00e0 installer \u00e0 l'aide de la commande npm install Exemple du fichier package.json : { \"name\": \"goodfood\", \"version\": \"1.0.0\", \"main\": \"node_modules/expo/AppEntry.js\", \"scripts\": { \"start\": \"expo start\", \"android\": \"expo start --android\", \"ios\": \"expo start --ios\", \"web\": \"expo start --web\", \"eject\": \"expo eject\" }, \"dependencies\": { \"@react-navigation/native\": \"^6.0.8\", \"@react-navigation/native-stack\": \"^6.5.0\", \"expo\": \"~44.0.0\", \"expo-status-bar\": \"~1.2.0\", \"react\": \"17.0.1\", \"react-dom\": \"17.0.1\", \"react-hook-form\": \"^7.27.1\", \"react-native\": \"0.64.3\", \"react-native-safe-area-context\": \"3.3.2\", \"react-native-screens\": \"~3.10.1\", \"react-native-web\": \"0.17.1\" }, \"devDependencies\": { \"@babel/core\": \"^7.12.9\", \"@types/jest\": \"^27.4.0\", \"@types/react\": \"^17.0.39\", \"@types/react-native\": \"^0.66.16\", \"@types/react-test-renderer\": \"^17.0.1\" }, \"private\": true }","title":"Home"},{"location":"#installation-de-lenvironnement-de-lapplication-mobile","text":"","title":"Installation de l'environnement de l'application mobile"},{"location":"#prerequis","text":"Docker for desktop NodeJS # Contenant \u00e9galement le gestionnaire de paquet NPM. Expo # Pour \u00e9muler l'application mobile sur vos devices Android et IOS Installer \"Expo CLI\" : npm install -g expo-cli Installer YARN pour installer les d\u00e9pendances du projet","title":"Pr\u00e9requis"},{"location":"#attention-de-bien-se-positionner-dans-react-native-srcgood-food-mobile","text":"","title":"ATTENTION DE BIEN SE POSITIONNER DANS react-native-src/good-food-mobile"},{"location":"#creation-normale-du-projet-react-native-avec-expo-sans-docker","text":"* ### Commandes \u00e0 taper dans le terminal ```expo init GoodFood``` ```cd GoodFood``` ```npm start``` # On peut aussi utiliser expo start Cela d\u00e9marrera un serveur pour nous * ### Visualiser le projet sur son device * Installer Expo sur son device * Ouvrir Expo et flasher le QRcode g\u00e9n\u00e9r\u00e9 par la commande expo start (Pour IOS, utiliser le lecteur de QRcode int\u00e9gr\u00e9 \u00e0 l'appareil photo) C'est tout ! Il suffit maintenant de modifier le fichier App.js pour commencer \u00e0 d\u00e9velopper l'application et voir en temps r\u00e9el les changements effectu\u00e9s.","title":"Cr\u00e9ation normale du projet React-Native avec Expo SANS DOCKER"},{"location":"#creation-normale-du-projet-react-native-avec-expo-avec-docker","text":"Se reporter au fichier README.md sur le repository pour installer un projet react-native dans un container DOCKER.","title":"Cr\u00e9ation normale du projet React-Native avec Expo AVEC DOCKER"},{"location":"#les-dependences-installees","text":"Afin de g\u00e9rer la gestion de l'application Good Food, les d\u00e9pendances contenues dans le fichier package.json sont \u00e0 installer \u00e0 l'aide de la commande npm install Exemple du fichier package.json : { \"name\": \"goodfood\", \"version\": \"1.0.0\", \"main\": \"node_modules/expo/AppEntry.js\", \"scripts\": { \"start\": \"expo start\", \"android\": \"expo start --android\", \"ios\": \"expo start --ios\", \"web\": \"expo start --web\", \"eject\": \"expo eject\" }, \"dependencies\": { \"@react-navigation/native\": \"^6.0.8\", \"@react-navigation/native-stack\": \"^6.5.0\", \"expo\": \"~44.0.0\", \"expo-status-bar\": \"~1.2.0\", \"react\": \"17.0.1\", \"react-dom\": \"17.0.1\", \"react-hook-form\": \"^7.27.1\", \"react-native\": \"0.64.3\", \"react-native-safe-area-context\": \"3.3.2\", \"react-native-screens\": \"~3.10.1\", \"react-native-web\": \"0.17.1\" }, \"devDependencies\": { \"@babel/core\": \"^7.12.9\", \"@types/jest\": \"^27.4.0\", \"@types/react\": \"^17.0.39\", \"@types/react-native\": \"^0.66.16\", \"@types/react-test-renderer\": \"^17.0.1\" }, \"private\": true }","title":"Les d\u00e9pendences install\u00e9es"},{"location":"architecture/","text":"Architecture des dossiers de travail Les principaux dossiers sources ../App.js android ios ./src/ : components navigation screens tests ./assets D\u00e9finition des dossiers ../App.js est le point d'entr\u00e9e de l'application mobile quand elle est lanc\u00e9e ./src/ : components Sont toutes les parties autonomes des screens (CustomInput, Logo, CustomButton,...). Un component g\u00e9rera son affichage, son style et son export. navigation Contient un fichier index.js renseignant tout les screens de l'application mobile qui seront affich\u00e9s. screens Un screen est un 'template' sur lequel on vient charger des components. tests Sont les fichiers de tests qui seront utilis\u00e9s par Jest. ./assets Le dossier des assets contiendra les images et le fichier data des franchis\u00e9s","title":"Architecture des dossiers de travail"},{"location":"architecture/#architecture-des-dossiers-de-travail","text":"","title":"Architecture des dossiers de travail"},{"location":"architecture/#les-principaux-dossiers-sources","text":"../App.js android ios ./src/ : components navigation screens tests ./assets","title":"Les principaux dossiers sources"},{"location":"architecture/#definition-des-dossiers","text":"../App.js est le point d'entr\u00e9e de l'application mobile quand elle est lanc\u00e9e ./src/ : components Sont toutes les parties autonomes des screens (CustomInput, Logo, CustomButton,...). Un component g\u00e9rera son affichage, son style et son export. navigation Contient un fichier index.js renseignant tout les screens de l'application mobile qui seront affich\u00e9s. screens Un screen est un 'template' sur lequel on vient charger des components. tests Sont les fichiers de tests qui seront utilis\u00e9s par Jest. ./assets Le dossier des assets contiendra les images et le fichier data des franchis\u00e9s","title":"D\u00e9finition des dossiers"},{"location":"Gestion%20des%20pages/PanierPage_page/","text":"Gestion de la page panier La page panier Sur la page panier, on retrouve la liste des plats command\u00e9s par l'utilisateur. Un bouton \"Payer\" se trouve en bas de page pour lui permettre de payer son panier par carte bleue \u00e0 l'aide de l'extension s\u00e9curis\u00e9e Stripe.","title":"PanierPage page"},{"location":"Gestion%20des%20pages/PanierPage_page/#la-page-panier","text":"Sur la page panier, on retrouve la liste des plats command\u00e9s par l'utilisateur. Un bouton \"Payer\" se trouve en bas de page pour lui permettre de payer son panier par carte bleue \u00e0 l'aide de l'extension s\u00e9curis\u00e9e Stripe.","title":"La page panier"},{"location":"Gestion%20des%20pages/franchisePage_page/","text":"Gestion de la page d'un franchis\u00e9 La page d'un franchis\u00e9 Sur la page d'un franchis\u00e9 sont list\u00e9s les plats du restaurant avec un bouton \"Ajouter au panier\" pour que l'utilisateur puisse les commander. En bas de page se trouve le bouton \"Voir mon panier\" une fois que l'utlisateur a fini sa commande et souhaite acc\u00e9der au panier pour payer.","title":"franchisePage page"},{"location":"Gestion%20des%20pages/franchisePage_page/#la-page-dun-franchise","text":"Sur la page d'un franchis\u00e9 sont list\u00e9s les plats du restaurant avec un bouton \"Ajouter au panier\" pour que l'utilisateur puisse les commander. En bas de page se trouve le bouton \"Voir mon panier\" une fois que l'utlisateur a fini sa commande et souhaite acc\u00e9der au panier pour payer.","title":"La page d'un franchis\u00e9"},{"location":"Gestion%20des%20pages/homePage_page/","text":"Gestion de la page home La page home Sur la page home, on retrouve la liste des franchis\u00e9s tri\u00e9s par la ville de localisation de l'utilisateur. L'utilisateur n'a plus qu'\u00e0 cliquer sur le nom d'un franchis\u00e9 afin d'acc\u00e9der \u00e0 sa page de description listant ses plats disponibles.","title":"homePage page"},{"location":"Gestion%20des%20pages/homePage_page/#la-page-home","text":"Sur la page home, on retrouve la liste des franchis\u00e9s tri\u00e9s par la ville de localisation de l'utilisateur. L'utilisateur n'a plus qu'\u00e0 cliquer sur le nom d'un franchis\u00e9 afin d'acc\u00e9der \u00e0 sa page de description listant ses plats disponibles.","title":"La page home"},{"location":"Gestion%20des%20pages/login_register_page/","text":"Gestion de la page d'accueil Les diff\u00e9rents \u00e9crans La m\u00e9thode de validation des champs La validation des champs utilisateur (nom, email, mot de passe) se fait \u00e0 l'aide du package 'react-hook-form'. L'\u00e9cran du formulaire Exemple : On importe useForm du package react-hook-form import {useForm} from 'react-hook-form'; Dans notre composant fonctionnelle, on cr\u00e9e notre constante de state qui fera appel \u00e0 la fonction useForm() : const {control, handleSubmit, formState: {errors}} = useForm(); control , servira \u00e0 enregistrer la valeur des champs du formulaire lorsque la fonction handleSubmit aura \u00e9t\u00e9 lanc\u00e9e par l'appui sur le bouton valider. Exemple de l'\u00e9cran du formulaire : import React from 'react'; import { View, ScrollView } from 'react-native'; import {useForm} from 'react-hook-form'; const SignInScreen = () => { const {control, handleSubmit, formState: {errors}} = useForm(); const OnSignInPressed = (data) => { console.log(data); // Validate user then navigation.navigate('HomeScreen'); } return( <ScrollView showsVerticalScrollIndicator={false}> <View> <CustomInput name=\"username\" placeholder= \"Nom d'utilisateur\" secureTextEntry={false} control={control} rules= {{required: \"Le nom d'utilisateur est requis\"}} /> <CustomButton text=\"Se connecter\" onPress={handleSubmit(OnSignInPressed)} /> </View> </ScrollView> ) } export default SignInScreen; Le compososant CustomInput Le composant CustomInput prendra en param\u00e8tres les valeurs qu'on lui aura pass\u00e9es : <CustomInput name=\"username\" placeholder= \"Nom d'utilisateur\" secureTextEntry={false} control={control} rules= {{required: \"Le nom d'utilisateur est requis\"}} /> et il retournera le composant Controller qui traitera ces donn\u00e9es import { StyleSheet, Text, View, TextInput } from 'react-native'; import React from 'react'; import {Controller} from 'react-hook-form'; const CustomInput = ({control, name, placeholder, secureTextEntry, rules = {}}) => { return ( <Controller control={control} name={name} rules={rules} render = {({field: {value, onChange, onBlur}, fieldState: {error}}) => { return( <> <View style={[styles.container, {borderColor: error ? 'red' : '#6FE3F0'}]}> <TextInput value={value} onChangeText={onChange} onBlur={onBlur} placeholder={placeholder} style={styles.input} secureTextEntry={secureTextEntry} /> </View> { error && <Text style={{color: 'red', alignSelf:'stretch'}}>{error.message || 'Error' }</Text>} </> ); } } /> ) } export default CustomInput","title":"Login register page"},{"location":"Gestion%20des%20pages/login_register_page/#les-differents-ecrans","text":"","title":"Les diff\u00e9rents \u00e9crans"},{"location":"Gestion%20des%20pages/login_register_page/#la-methode-de-validation-des-champs","text":"La validation des champs utilisateur (nom, email, mot de passe) se fait \u00e0 l'aide du package 'react-hook-form'.","title":"La m\u00e9thode de validation des champs"},{"location":"Gestion%20des%20pages/login_register_page/#lecran-du-formulaire","text":"Exemple : On importe useForm du package react-hook-form import {useForm} from 'react-hook-form'; Dans notre composant fonctionnelle, on cr\u00e9e notre constante de state qui fera appel \u00e0 la fonction useForm() : const {control, handleSubmit, formState: {errors}} = useForm(); control , servira \u00e0 enregistrer la valeur des champs du formulaire lorsque la fonction handleSubmit aura \u00e9t\u00e9 lanc\u00e9e par l'appui sur le bouton valider. Exemple de l'\u00e9cran du formulaire : import React from 'react'; import { View, ScrollView } from 'react-native'; import {useForm} from 'react-hook-form'; const SignInScreen = () => { const {control, handleSubmit, formState: {errors}} = useForm(); const OnSignInPressed = (data) => { console.log(data); // Validate user then navigation.navigate('HomeScreen'); } return( <ScrollView showsVerticalScrollIndicator={false}> <View> <CustomInput name=\"username\" placeholder= \"Nom d'utilisateur\" secureTextEntry={false} control={control} rules= {{required: \"Le nom d'utilisateur est requis\"}} /> <CustomButton text=\"Se connecter\" onPress={handleSubmit(OnSignInPressed)} /> </View> </ScrollView> ) } export default SignInScreen;","title":"L'\u00e9cran du formulaire"},{"location":"Gestion%20des%20pages/login_register_page/#le-compososant-custominput","text":"Le composant CustomInput prendra en param\u00e8tres les valeurs qu'on lui aura pass\u00e9es : <CustomInput name=\"username\" placeholder= \"Nom d'utilisateur\" secureTextEntry={false} control={control} rules= {{required: \"Le nom d'utilisateur est requis\"}} /> et il retournera le composant Controller qui traitera ces donn\u00e9es import { StyleSheet, Text, View, TextInput } from 'react-native'; import React from 'react'; import {Controller} from 'react-hook-form'; const CustomInput = ({control, name, placeholder, secureTextEntry, rules = {}}) => { return ( <Controller control={control} name={name} rules={rules} render = {({field: {value, onChange, onBlur}, fieldState: {error}}) => { return( <> <View style={[styles.container, {borderColor: error ? 'red' : '#6FE3F0'}]}> <TextInput value={value} onChangeText={onChange} onBlur={onBlur} placeholder={placeholder} style={styles.input} secureTextEntry={secureTextEntry} /> </View> { error && <Text style={{color: 'red', alignSelf:'stretch'}}>{error.message || 'Error' }</Text>} </> ); } } /> ) } export default CustomInput","title":"Le compososant CustomInput"}]}